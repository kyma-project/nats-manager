// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	nats_go "github.com/nats-io/nats.go"
)

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

type Conn_Expecter struct {
	mock *mock.Mock
}

func (_m *Conn) EXPECT() *Conn_Expecter {
	return &Conn_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Conn) Close() {
	_m.Called()
}

// Conn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Conn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Conn_Expecter) Close() *Conn_Close_Call {
	return &Conn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Conn_Close_Call) Run(run func()) *Conn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Close_Call) Return() *Conn_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Conn_Close_Call) RunAndReturn(run func()) *Conn_Close_Call {
	_c.Run(run)
	return _c
}

// IsConnected provides a mock function with no fields
func (_m *Conn) IsConnected() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsConnected")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Conn_IsConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnected'
type Conn_IsConnected_Call struct {
	*mock.Call
}

// IsConnected is a helper method to define mock.On call
func (_e *Conn_Expecter) IsConnected() *Conn_IsConnected_Call {
	return &Conn_IsConnected_Call{Call: _e.mock.On("IsConnected")}
}

func (_c *Conn_IsConnected_Call) Run(run func()) *Conn_IsConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_IsConnected_Call) Return(_a0 bool) *Conn_IsConnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_IsConnected_Call) RunAndReturn(run func() bool) *Conn_IsConnected_Call {
	_c.Call.Return(run)
	return _c
}

// JetStream provides a mock function with no fields
func (_m *Conn) JetStream() (nats_go.JetStreamContext, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JetStream")
	}

	var r0 nats_go.JetStreamContext
	var r1 error
	if rf, ok := ret.Get(0).(func() (nats_go.JetStreamContext, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() nats_go.JetStreamContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats_go.JetStreamContext)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Conn_JetStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JetStream'
type Conn_JetStream_Call struct {
	*mock.Call
}

// JetStream is a helper method to define mock.On call
func (_e *Conn_Expecter) JetStream() *Conn_JetStream_Call {
	return &Conn_JetStream_Call{Call: _e.mock.On("JetStream")}
}

func (_c *Conn_JetStream_Call) Run(run func()) *Conn_JetStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_JetStream_Call) Return(_a0 nats_go.JetStreamContext, _a1 error) *Conn_JetStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Conn_JetStream_Call) RunAndReturn(run func() (nats_go.JetStreamContext, error)) *Conn_JetStream_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *Conn) Status() nats_go.Status {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 nats_go.Status
	if rf, ok := ret.Get(0).(func() nats_go.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(nats_go.Status)
	}

	return r0
}

// Conn_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Conn_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *Conn_Expecter) Status() *Conn_Status_Call {
	return &Conn_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *Conn_Status_Call) Run(run func()) *Conn_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Status_Call) Return(_a0 nats_go.Status) *Conn_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Status_Call) RunAndReturn(run func() nats_go.Status) *Conn_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
