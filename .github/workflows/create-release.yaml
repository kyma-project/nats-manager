name: "Create release"

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Release name, eg '1.0.1'"
        default: ""
        required: true

jobs:
  verify-head-status:
    name: Verify head
    runs-on: ubuntu-latest

    steps:
      - name: Verify that the current branch has a name that starts with 'release-'
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$CURRENT_BRANCH" == version-* ]]; then
            echo "Branch name starts with 'version-'."
          else
            echo "Branch name does not start with 'version-'."
            exit 1
          fi

      - name: Verify, that an image with the target release version as a tag, does not exis
        run: ./scripts/no_image_exists ${{ github.event.inputs.name }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check that the image tag defined in the sec-scanner-config is the same as the release version (${{ github.event.inputs.name }})
        run: ./scripts/check_image.sh ${{ github.event.inputs.name }}

      - name: Run unit tests
        run: make test

      - run: make build

  create-draft:
    name: Create draft release
    needs: verify-head-status
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/create_changelog.sh ${{ github.event.inputs.name }}

      - name: Create draft release
        id: create-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=$(./scripts/create_draft_release.sh ${{ github.event.inputs.name }})
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      # This will trigger the prow release jobs. The value for github.event.inputs_name will be awailable as the env var PULL_BASE_REF.
      - name: Create lightweight tag
        run: |
          git tag ${{ github.event.inputs.name }}
          git push origin ${{ github.event.inputs.name }}

      - name: Check if the release image was build and can be found in image registery
        run: |
          ./scripts/image_exists.sh

    outputs:
      release_id: ${{ steps.create-draft.outputs.release_id }}

  publish-release:
    name: Publish release
    needs: [verify-head-status, create-draft]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./scripts/publish_release.sh ${{ needs.create-draft.outputs.release_id }}
